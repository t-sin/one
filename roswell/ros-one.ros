#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -m ros-one -L sbcl-bin -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:alexandria
                              :cl-ppcre
                              :one
                              :serapeum
                              :split-sequence)
                            :silent t))

(defpackage :ros.script.ros-one.3713178048
  (:use :cl))
(in-package :ros.script.ros-one.3713178048)

(defvar +usage+ "
usage: ros one [-h] [-s SYSTEM]* SEXP

execute SEXP under SYSTEMS used. by default, these packages are loaded:

- alexandria
- cl-ppcre
- one
- serapeum
- split-sequence

")

(defstruct option help systems sexp)

(defun parse-option (argv)
  (loop
     :for idx :from 0 :upto (1- (length argv))
     :for arg := (nth idx argv)
     :with option := (make-option)
     :do (cond ((string= arg "-h") (setf (option-help option) t))
               ((string= arg "-s")
                (progn
                  (incf idx)
                  (pushnew (nth idx argv) (option-systems option))))
               (t (progn
                    (setf (option-sexp option) arg)
                    (return-from parse-option option))))))

(defun main (&rest argv)
  (let ((option (parse-option argv)))
    (when (option-help option)
      (format t +usage+)
      (uiop:quit 0))
    (loop
       :for s :in (option-systems option)
       :do (if (ql:where-is-system s)
               (ql:quickload s :silent t)
               (progn
                 (format t "error: cannot find the system: ~s~%" s)
                 (uiop:quit 1))))
    (let ((*read-eval* nil))
      (eval (read-from-string (option-sexp option))))))
;;; vim: set ft=lisp lisp:
